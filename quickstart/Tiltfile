load("ext://helm_resource", "helm_resource", "helm_repo")
load("ext://min_tilt_version", "min_tilt_version")
# load("ext://min_k8s_version", "min_k8s_version")
load(
    "../version-tool/Tiltfile",
    "min_helm_version",
    "min_kind_version",
    "min_ctlptl_version",
    "min_k8s_version",
)

# The helm_resource extension uses the 'new extensions api' introduced in tilt 0.25
min_tilt_version("0.25")
min_k8s_version("1.23.0")
min_helm_version("3.8.0")
min_kind_version("0.12.0")
min_ctlptl_version("0.7.4")


# Where the redirect URI should go to, for example
EXTERNAL_URL = "http://localhost:65432"

# Customizable version selection.
# 1. Defaults (no parameters): Latest release (currently 1.0.0)
# 2. If TARGET_VERSION is set, use either HEAD or SemVer from backend as target
# 3. Both are overridable by X_IMAGE_TAG and X_CHART_TAG parameters
#
# TODO: lookup LATEST_GREEN in CI and set the values before calling this.
# NOTE: keycloak v. keycloakX - codecentric has a different chart for keycloak X, so
#       be sure to also set the USE_KEYCLOAK_X variable to False if you are using 1.0.0 or less.
TARGET_VERSION = os.environ.get("TARGET_VERSION", "1.0.0")
LATEST_GREEN_BACKEND_SHA = os.environ.get("LATEST_GREEN_BACKEND_SHA", "03c1bd4")
LATEST_GREEN_FRONTEND_SHA = os.environ.get("LATEST_GREEN_FRONTEND_SHA", "93bb332")

if TARGET_VERSION == "HEAD":
    BACKEND_IMAGE_TAG = os.environ.get(
        "BACKEND_IMAGE_TAG",
        "sha-" + LATEST_GREEN_BACKEND_SHA,
    )
    BACKEND_CHART_TAG = os.environ.get(
        "BACKEND_CHART_TAG",
        "0.0.0-sha-" + LATEST_GREEN_BACKEND_SHA,
    )
    FRONTEND_IMAGE_TAG = os.environ.get(
        "FRONTEND_IMAGE_TAG",
        "sha-" + LATEST_GREEN_FRONTEND_SHA,
    )
    FRONTEND_CHART_TAG = os.environ.get(
        "FRONTEND_CHART_TAG",
        "0.0.0-sha-" + LATEST_GREEN_FRONTEND_SHA,
    )
elif TARGET_VERSION == "1.0.0":
    BACKEND_IMAGE_TAG = os.environ.get(
        "BACKEND_IMAGE_TAG",
        "sha-f5bd4ef",
    )
    BACKEND_CHART_TAG = os.environ.get(
        "BACKEND_CHART_TAG",
        "1.0.0",
    )
    FRONTEND_IMAGE_TAG = os.environ.get(
        "FRONTEND_IMAGE_TAG",
        "sha-93bb332",
    )
    FRONTEND_CHART_TAG = os.environ.get(
        "FRONTEND_CHART_TAG",
        "0.0.0-sha-93bb332",
    )
else:
    fail("Unsupported target version: [%s]" % TARGET_VERSION)

enabled_services = [
    "ingress-nginx",
    "keycloak-bootstrap",
    "keycloak",
    "opentdf-abacus",
    "opentdf-attributes",
    "opentdf-entitlements",
    "opentdf-entitlement-pdp",
    "opentdf-entitlement-store",
    "opentdf-kas",
    "postgresql",
]

USE_KEYCLOAK_X = os.environ.get("USE_KEYCLOAK_X", TARGET_VERSION != "1.0.0")
if os.environ.get("QUICKSTART_BOOTSTRAP_DISABLED"):
    enabled_services.remove("keycloak-bootstrap")

if TARGET_VERSION == "1.0.0":
    enabled_services.remove("opentdf-entitlement-pdp")
    enabled_services.remove("opentdf-entitlement-store")
    enabled_services.append("opentdf-claims")

HELM_VALUES_PATH = "helm/" + TARGET_VERSION

# Where helm values for quickstart
if "HELM_VALUES_PATH" in os.environ:
    HELM_VALUES_PATH = os.getenv("HELM_VALUES_PATH")

def values_file(service_name):
    return"%s/values-%s.yaml" % (HELM_VALUES_PATH, service_name)

k8s_yaml(
    helm(
        "./helm/secrets",
    ),
)

helm_repo(
    "bitnami",
    "https://charts.bitnami.com/bitnami",
    labels="utility",
)
helm_repo(
    "codecentric",
    "https://codecentric.github.io/helm-charts",
    labels="utility",
)
helm_repo(
    "k8s-in",
    "https://kubernetes.github.io/ingress-nginx",
    labels="utility",
)

if "ingress-nginx" in enabled_services:
    helm_resource(
        "ingress-nginx",
        "k8s-in/ingress-nginx",
        flags=[
            "--version",
            "4.0.16",
            "--set",
            "controller.config.large-client-header-buffers=20 32k",
            "--set",
            "controller.admissionWebhooks.enabled=false",
        ],
        labels="third-party",
        port_forwards="65432:80",
        resource_deps=["k8s-in"],
    )

if "postgresql" in enabled_services:
    helm_resource(
        "postgresql",
        "bitnami/postgresql",
        flags=["--version", "10.16.2", "-f", values_file("postgresql")],
        labels="third-party",
        resource_deps=["bitnami"],
    )

if "opentdf-claims" in enabled_services:
    helm_resource(
        "opentdf-claims",
        "oci://ghcr.io/opentdf/charts/claims",
        flags=[
            "--version",
            BACKEND_CHART_TAG,
            "-f",
            values_file("claims"),
            "--set",
            "image.tag=%s" % BACKEND_IMAGE_TAG,
        ],
        labels="backend",
        resource_deps=["postgresql"],
    )

if "opentdf-attributes" in enabled_services:
    helm_resource(
        "opentdf-attributes",
        "oci://ghcr.io/opentdf/charts/attributes",
        flags=[
            "--version",
            BACKEND_CHART_TAG,
            "-f",
            values_file("attributes"),
            "--set",
            "image.tag=%s" % BACKEND_IMAGE_TAG,
            "--set",
            "oidc.externalHost=%s/auth" % EXTERNAL_URL,
        ],
        labels="backend",
        resource_deps=["postgresql"],
    )

if "opentdf-entitlement-store" in enabled_services:
    helm_resource(
        "opentdf-entitlement-store",
        "oci://ghcr.io/opentdf/charts/entitlement-store",
        flags=[
            "--version",
            BACKEND_CHART_TAG,
            "-f",
            values_file("entitlement-store"),
            "--set",
            "image.tag=%s" % BACKEND_IMAGE_TAG,
        ],
        labels="backend",
        resource_deps=["postgresql"],
    )

if "opentdf-entitlemnet-pdp" in enabled_services:
    helm_resource(
        "opentdf-entitlement-pdp",
        "oci://ghcr.io/opentdf/charts/entitlement-pdp",
        flags=[
            "--version",
            BACKEND_CHART_TAG,
            "-f",
            values_file("entitlement-pdp"),
            "--set",
            "image.tag=%s" % BACKEND_IMAGE_TAG,
        ],
        labels="backend",
        resource_deps=["opentdf-entitlement-store"],
    )

if "opentdf-entitlements" in enabled_services:
    helm_resource(
        "opentdf-entitlements",
        "oci://ghcr.io/opentdf/charts/entitlements",
        flags=[
            "--version",
            BACKEND_CHART_TAG,
            "-f",
            values_file("entitlements"),
            "--set",
            "image.tag=%s" % BACKEND_IMAGE_TAG,
            "--set",
            "oidc.authorizationUrl=%s/auth/realms/tdf/protocol/openid-connect/auth"
            % EXTERNAL_URL,
            "--set",
            "oidc.tokenUrl=%s/auth/realms/tdf/protocol/openid-connect/token"
            % EXTERNAL_URL,
        ],
        labels="backend",
        resource_deps=["postgresql"],
    )


if "keycloak" in enabled_services:
    if USE_KEYCLOAK_X:
        helm_resource(
            "keycloak",
            "codecentric/keycloakx",
            flags=[
                "--version",
                "1.4.2",
                "-f",
                values_file("keycloak"),
                "--set",
                "image.tag=%s" % BACKEND_IMAGE_TAG,
            ],
            labels="third-party",
            resource_deps=["opentdf-entitlement-pdp", "codecentric"],
        )
    else:
        helm_resource(
            "keycloak",
            "codecentric/keycloak",
            flags=[
                "--version",
                "17.0.1",
                "-f",
                values_file("keycloak"),
                "--set",
                "image.tag=%s" % BACKEND_IMAGE_TAG,
            ],
            labels="third-party",
            resource_deps=["opentdf-entitlement-pdp", "codecentric"],
        )

if "opentdf-kas" in enabled_services:
    helm_resource(
        "opentdf-kas",
        "oci://ghcr.io/opentdf/charts/kas",
        flags=[
            "--version",
            BACKEND_CHART_TAG,
            "-f",
            values_file("kas"),
            "--set",
            "image.tag=%s" % BACKEND_IMAGE_TAG,
        ],
        labels="backend",
        resource_deps=["opentdf-attributes", "keycloak"],
    )

# ability to disable the quickstart defaults
if "keycloak-bootstrap" in enabled_services:
    helm_resource(
        "keycloak-bootstrap",
        "oci://ghcr.io/opentdf/charts/keycloak-bootstrap",
        flags=[
            "--version",
            BACKEND_CHART_TAG,
            "-f",
            values_file("keycloak-bootstrap"),
            "--set",
            "externalUrl=%s" % EXTERNAL_URL,
            "--set",
            "image.tag=%s" % BACKEND_IMAGE_TAG,
        ],
        labels="utility",
        resource_deps=["opentdf-attributes", "opentdf-entitlements", "keycloak"],
    )

if "opentdf-abacus" in enabled_services:
    helm_resource(
        "opentdf-abacus",
        "oci://ghcr.io/opentdf/charts/abacus",
        flags=[
            "--version",
            FRONTEND_CHART_TAG,
            "-f",
            values_file("abacus"),
            "--set",
            "attributes.serverUrl=%s/api/attributes" % EXTERNAL_URL,
            "--set",
            "entitlements.serverUrl=%s/api/entitlements" % EXTERNAL_URL,
            "--set",
            "image.tag=%s" % FRONTEND_IMAGE_TAG,
            "--set",
            "oidc.serverUrl=%s/auth/" % EXTERNAL_URL,
        ],
        labels="frontend",
        resource_deps=["keycloak-bootstrap"],
    )

# ability to pass in custom test script with path to script as env var
# e.g.: CI=1 TEST_SCRIPT=tests/wait-and-test.sh tilt up
if "TEST_SCRIPT" in os.environ:
    if not os.environ.get("CI"):
        warn("Running TEST_SCRIPT=[%s] not in CI mode" % os.environ.get("TEST_SCRIPT"))
    local_resource(
        "passed-in-test-script",
        os.environ.get("TEST_SCRIPT"),
        labels="tests",
        resource_deps=["ingress-nginx", "opentdf-kas", "keycloak-bootstrap"],
    )
elif os.environ.get("CI"):
    warn("Running in CI mode but no TEST_SCRIPT defined")
